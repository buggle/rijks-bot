#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path("lib"))
require 'httparty'
require 'dotenv'
require 'pry'
require 'rijksmus-api'
require 'twitter'
require 'open-uri'
Dotenv.load


# puts random_flower

client = Twitter::REST::Client.new do |config|
  config.consumer_key        = ENV["RIJKSBOT_CONSUMER_KEY"]
  config.consumer_secret     = ENV["RIJKSBOT_CONSUMER_SECRET"]
  config.access_token        = ENV["RIJKSBOT_ACCESS_TOKEN"]
  config.access_token_secret = ENV["RIJKSBOT_ACCESS_SECRET"]
end

mentions = client.mentions_timeline.select{|tweet| tweet.created_at > (Time.now.utc - 86400)}
timeline = client.user_timeline(count: 800).map{|t| t.in_reply_to_status_id}                                                        


def already_replied?(client, tweet)
  already_replied_to =  client.user_timeline(count: 800).map{|t| t.in_reply_to_status_id}
  already_replied_to.include?(tweet.id)
end

# create def count_twitter_max = 800
# create def one_day_in_seconds = 86400

def extract_search(tweet)
  tweet.text.downcase.sub("@rijks_bot", "").strip
end

def default_image(search_term)
  {
  "webImage" => { "url" => "https://lh3.googleusercontent.com/D2IPnfkJPa8cPSuhehu5e2aeteqzK5Zb0OzL9-zA4_FHBQHrD8RLT_3XZ9FDYtE64e_cdqTxZF_VfG4MsPcKr90FV6E" },
  "title" => "Couldn't find an image for that."
  }
end

def get_image(search_term)
  api_key = ENV["rijksmuseum_api_key"]
  image = Rijksmus::API::Client.new(search_term, api_key).random_image_search
end

def reply_with_image(client, tweet, image)
  image_url = image["webImage"]["url"]
  image_title = image["title"]
  screen_name =  "@" + tweet.user.screen_name
  text = screen_name + " " + image_title
  client.update_with_media(text, open(image_url), in_reply_to_status_id: tweet.id)
end

mentions.each do |tweet|
  puts "Recieved mention: #{tweet.text} from #{tweet.user.screen_name}"
    
  if already_replied?(client, tweet)
    puts "already replied to #{tweet.text}"
  else   
    puts "replying to #{tweet.user.screen_name}"
    search_term = extract_search(tweet)
    image = get_image(search_term) || default_image(search_term)
    reply_with_image(client, tweet, image)
  end
end

puts "finished"
